"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8392],{83306:function(n,e,a){a.r(e),a.d(e,{assets:function(){return c},contentTitle:function(){return l},default:function(){return g},frontMatter:function(){return o},metadata:function(){return d},toc:function(){return u}});var t=a(87462),i=a(63366),s=(a(67294),a(3905)),p=a(56923),r=["components"],o={},l="<span>parse</span><wbr/><span><span>Entry</span></span>",d={unversionedId:"api/io.github.graphglue.connection.filter.definition/-node-set-filter-definition/parse-entry-",id:"api/io.github.graphglue.connection.filter.definition/-node-set-filter-definition/parse-entry-",title:"<span>parse</span><wbr/><span><span>Entry</span></span>",description:"",source:"@site/docs/api/io.github.graphglue.connection.filter.definition/-node-set-filter-definition/parse-entry-.mdx",sourceDirName:"api/io.github.graphglue.connection.filter.definition/-node-set-filter-definition",slug:"/api/io.github.graphglue.connection.filter.definition/-node-set-filter-definition/parse-entry-",permalink:"/graph-glue/api/io.github.graphglue.connection.filter.definition/-node-set-filter-definition/parse-entry-",tags:[],version:"current",frontMatter:{},sidebar:"apiSidebar",previous:{title:"<span>Node</span><wbr/><span>Set</span><wbr/><span>Filter</span><wbr/><span><span>Definition</span></span>",permalink:"/graph-glue/api/io.github.graphglue.connection.filter.definition/-node-set-filter-definition/-node-set-filter-definition-"},next:{title:"<span>Node</span><wbr/><span>Sub</span><wbr/><span>Filter</span><wbr/><span><span>Definition</span></span>",permalink:"/graph-glue/api/io.github.graphglue.connection.filter.definition/-node-sub-filter-definition/index-"}},c={},u=[],f={toc:u};function g(n){var e=n.components,a=(0,i.Z)(n,r);return(0,s.kt)("wrapper",(0,t.Z)({},f,a,{components:e,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"parseentry"},(0,s.kt)("span",null,"parse"),(0,s.kt)("wbr",null),(0,s.kt)("span",null,(0,s.kt)("span",null,"Entry"))),(0,s.kt)(p.Z,{dokkaHTML:'\n  \n  <div class="cover ">\n    \n  </div>\n  <div class="platform-hinted " data-platform-hinted="data-platform-hinted"><div class="content sourceset-depenent-content" data-active="" data-togglable=":dokkaHtml/main"><div class="symbol monospace"><span class="token keyword">open </span><span class="token keyword">override </span><span class="token keyword">fun </span><a href="parse-entry-"><span class="token function">parseEntry</span></a><span class="token punctuation">(</span><span class="parameters "><span class="parameter ">value<span class="token operator">: </span><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-any/index.html">Any</a><span class="token operator">?</span></span></span><span class="token punctuation">)</span><span class="token operator">: </span><a href="../../io.github.graphglue.connection.filter.model/-filter-entry/index-">FilterEntry</a><span class="top-right-position"><span class="copy-icon"></span><div class="copy-popup-wrapper popup-to-left"><span class="copy-popup-icon"></span><span>Content copied to clipboard</span></div></span></div><p class="paragraph">Parses the entry of the provided filter</p><h4 class="">Return</h4><p class="paragraph">the parsed filter entry</p><h2 class="">Parameters</h2><div data-togglable="Parameters"><div class="table" data-togglable="Parameters"><div class="table-row" data-filterable-current=":dokkaHtml/main" data-filterable-set=":dokkaHtml/main"><div class="main-subrow keyValue WithExtraAttributes"><div class=""><span class="inline-flex"><div><span><span>value</span></span></div></span></div><div><div class="title"><div data-togglable="Parameters"><p class="paragraph">the value to parse</p></div></div></div></div></div></div></div></div></div>\n',mdxType:"DokkaComponent"}))}g.isMDXComponent=!0}}]);