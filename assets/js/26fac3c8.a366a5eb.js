"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3001],{91135:function(e,n,a){a.r(n),a.d(n,{assets:function(){return d},contentTitle:function(){return i},default:function(){return h},frontMatter:function(){return r},metadata:function(){return c},toc:function(){return l}});var t=a(87462),s=a(63366),p=(a(67294),a(3905)),o=a(56923),u=["components"],r={},i="<span><span>execute</span></span>",c={unversionedId:"api/io.github.graphglue.data.execution/-node-query-executor/execute-",id:"api/io.github.graphglue.data.execution/-node-query-executor/execute-",title:"<span><span>execute</span></span>",description:"",source:"@site/docs/api/io.github.graphglue.data.execution/-node-query-executor/execute-.mdx",sourceDirName:"api/io.github.graphglue.data.execution/-node-query-executor",slug:"/api/io.github.graphglue.data.execution/-node-query-executor/execute-",permalink:"/graph-glue/api/io.github.graphglue.data.execution/-node-query-executor/execute-",tags:[],version:"current",frontMatter:{},sidebar:"apiSidebar",previous:{title:"<span>Node</span><wbr/><span>Query</span><wbr/><span><span>Executor</span></span>",permalink:"/graph-glue/api/io.github.graphglue.data.execution/-node-query-executor/-node-query-executor-"},next:{title:"<span>Node</span><wbr/><span>Query</span><wbr/><span><span>Options</span></span>",permalink:"/graph-glue/api/io.github.graphglue.data.execution/-node-query-options/index-"}},d={},l=[],g={toc:l};function h(e){var n=e.components,a=(0,s.Z)(e,u);return(0,p.kt)("wrapper",(0,t.Z)({},g,a,{components:n,mdxType:"MDXLayout"}),(0,p.kt)("h1",{id:"execute"},(0,p.kt)("span",null,(0,p.kt)("span",null,"execute"))),(0,p.kt)(o.Z,{dokkaHTML:'\n  \n  <div class="cover ">\n    \n  </div>\n  <div class="platform-hinted " data-platform-hinted="data-platform-hinted"><div class="content sourceset-depenent-content" data-active="" data-togglable=":dokkaHtml/main"><div class="symbol monospace"><span class="token keyword">suspend </span><span class="token keyword">fun </span><a href="execute-"><span class="token function">execute</span></a><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">: </span><a href="../-node-query-result/index-">NodeQueryResult</a><span class="token operator">&lt;</span><span class="token operator">*</span><span class="token operator">&gt;</span><span class="top-right-position"><span class="copy-icon"></span><div class="copy-popup-wrapper popup-to-left"><span class="copy-popup-icon"></span><span>Content copied to clipboard</span></div></span></div><p class="paragraph">Executes the query</p><h4 class="">Return</h4><p class="paragraph">the query result including all found nodes</p></div></div>\n',mdxType:"DokkaComponent"}))}h.isMDXComponent=!0}}]);