"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7667],{39527:function(a,s,n){n.r(s),n.d(s,{assets:function(){return g},contentTitle:function(){return o},default:function(){return u},frontMatter:function(){return r},metadata:function(){return d},toc:function(){return h}});var e=n(87462),t=n(63366),p=(n(67294),n(3905)),i=n(56923),l=["components"],r={},o="<span>is</span><wbr/><span>Valid</span><wbr/><span>Additional</span><wbr/><span><span>Type</span></span>",d={unversionedId:"api/io.github.graphglue.graphql/-graphglue-graph-q-l-configuration/-graphglue-schema-generator-hooks/is-valid-additional-type-",id:"api/io.github.graphglue.graphql/-graphglue-graph-q-l-configuration/-graphglue-schema-generator-hooks/is-valid-additional-type-",title:"<span>is</span><wbr/><span>Valid</span><wbr/><span>Additional</span><wbr/><span><span>Type</span></span>",description:"",source:"@site/docs/api/io.github.graphglue.graphql/-graphglue-graph-q-l-configuration/-graphglue-schema-generator-hooks/is-valid-additional-type-.mdx",sourceDirName:"api/io.github.graphglue.graphql/-graphglue-graph-q-l-configuration/-graphglue-schema-generator-hooks",slug:"/api/io.github.graphglue.graphql/-graphglue-graph-q-l-configuration/-graphglue-schema-generator-hooks/is-valid-additional-type-",permalink:"/graph-glue/api/io.github.graphglue.graphql/-graphglue-graph-q-l-configuration/-graphglue-schema-generator-hooks/is-valid-additional-type-",tags:[],version:"current",frontMatter:{},sidebar:"apiSidebar",previous:{title:"<span>Graphglue</span><wbr/><span>Schema</span><wbr/><span>Generator</span><wbr/><span><span>Hooks</span></span>",permalink:"/graph-glue/api/io.github.graphglue.graphql/-graphglue-graph-q-l-configuration/-graphglue-schema-generator-hooks/-graphglue-schema-generator-hooks-"},next:{title:"<span>is</span><wbr/><span>Valid</span><wbr/><span><span>Property</span></span>",permalink:"/graph-glue/api/io.github.graphglue.graphql/-graphglue-graph-q-l-configuration/-graphglue-schema-generator-hooks/is-valid-property-"}},g={},h=[],c={toc:h};function u(a){var s=a.components,n=(0,t.Z)(a,l);return(0,p.kt)("wrapper",(0,e.Z)({},c,n,{components:s,mdxType:"MDXLayout"}),(0,p.kt)("h1",{id:"isvalidadditionaltype"},(0,p.kt)("span",null,"is"),(0,p.kt)("wbr",null),(0,p.kt)("span",null,"Valid"),(0,p.kt)("wbr",null),(0,p.kt)("span",null,"Additional"),(0,p.kt)("wbr",null),(0,p.kt)("span",null,(0,p.kt)("span",null,"Type"))),(0,p.kt)(i.Z,{dokkaHTML:'\n  \n  <div class="cover ">\n    \n  </div>\n  <div class="platform-hinted " data-platform-hinted="data-platform-hinted"><div class="content sourceset-depenent-content" data-active="" data-togglable=":dokkaHtml/main"><div class="symbol monospace"><span class="token keyword">open </span><span class="token keyword">override </span><span class="token keyword">fun </span><a href="is-valid-additional-type-"><span class="token function">isValidAdditionalType</span></a><span class="token punctuation">(</span><span class="parameters "><span class="parameter ">kClass<span class="token operator">: </span><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.reflect/-k-class/index.html">KClass</a><span class="token operator">&lt;</span><span class="token operator">*</span><span class="token operator">&gt;</span><span class="token punctuation">, </span></span><span class="parameter ">inputType<span class="token operator">: </span><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html">Boolean</a></span></span><span class="token punctuation">)</span><span class="token operator">: </span><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html">Boolean</a><span class="top-right-position"><span class="copy-icon"></span><div class="copy-popup-wrapper popup-to-left"><span class="copy-popup-icon"></span><span>Content copied to clipboard</span></div></span></div><p class="paragraph">Checks if an additional type is valid Used when adding subtypes of interfaces Ignores <a href="../../../io.github.graphglue.model/-node/index-">Node</a> types, as those are handled manually</p><h4 class="">Return</h4><p class="paragraph"><code class="lang-kotlin">true</code> if the class should be added to the additional types to generate</p><h2 class="">Parameters</h2><div data-togglable="Parameters"><div class="table" data-togglable="Parameters"><div class="table-row" data-filterable-current=":dokkaHtml/main" data-filterable-set=":dokkaHtml/main"><div class="main-subrow keyValue WithExtraAttributes"><div class=""><span class="inline-flex"><div><span>k</span><wbr><span><span>Class</span></span></div></span></div><div><div class="title"><div data-togglable="Parameters"><p class="paragraph">the  class to check</p></div></div></div></div></div><div class="table-row" data-filterable-current=":dokkaHtml/main" data-filterable-set=":dokkaHtml/main"><div class="main-subrow keyValue WithExtraAttributes"><div class=""><span class="inline-flex"><div><span>input</span><wbr><span><span>Type</span></span></div></span></div><div><div class="title"><div data-togglable="Parameters"><p class="paragraph">shall an input type be generated</p></div></div></div></div></div></div></div></div></div>\n',mdxType:"DokkaComponent"}))}u.isMDXComponent=!0}}]);