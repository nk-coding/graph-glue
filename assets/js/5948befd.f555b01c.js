"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3198],{41585:function(e,n,a){a.r(n),a.d(n,{assets:function(){return d},contentTitle:function(){return l},default:function(){return h},frontMatter:function(){return p},metadata:function(){return c},toc:function(){return u}});var t=a(87462),s=a(63366),i=(a(67294),a(3905)),o=a(56923),r=["components"],p={},l="<span>generate</span><wbr/><span><span>Predicate</span></span>",c={unversionedId:"api/io.github.graphglue.connection.filter.model/-none-node-set-filter-entry/generate-predicate-",id:"api/io.github.graphglue.connection.filter.model/-none-node-set-filter-entry/generate-predicate-",title:"<span>generate</span><wbr/><span><span>Predicate</span></span>",description:"",source:"@site/docs/api/io.github.graphglue.connection.filter.model/-none-node-set-filter-entry/generate-predicate-.mdx",sourceDirName:"api/io.github.graphglue.connection.filter.model/-none-node-set-filter-entry",slug:"/api/io.github.graphglue.connection.filter.model/-none-node-set-filter-entry/generate-predicate-",permalink:"/graph-glue/api/io.github.graphglue.connection.filter.model/-none-node-set-filter-entry/generate-predicate-",tags:[],version:"current",frontMatter:{},sidebar:"apiSidebar",previous:{title:"<span>None</span><wbr/><span>Node</span><wbr/><span>Set</span><wbr/><span>Filter</span><wbr/><span><span>Entry</span></span>",permalink:"/graph-glue/api/io.github.graphglue.connection.filter.model/-none-node-set-filter-entry/-none-node-set-filter-entry-"},next:{title:"<span>Not</span><wbr/><span>Meta</span><wbr/><span><span>Filter</span></span>",permalink:"/graph-glue/api/io.github.graphglue.connection.filter.model/-not-meta-filter/index-"}},d={},u=[],g={toc:u};function h(e){var n=e.components,a=(0,s.Z)(e,r);return(0,i.kt)("wrapper",(0,t.Z)({},g,a,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"generatepredicate"},(0,i.kt)("span",null,"generate"),(0,i.kt)("wbr",null),(0,i.kt)("span",null,(0,i.kt)("span",null,"Predicate"))),(0,i.kt)(o.Z,{dokkaHTML:'\n  \n  <div class="cover ">\n    \n  </div>\n  <div class="platform-hinted " data-platform-hinted="data-platform-hinted"><div class="content sourceset-depenent-content" data-active="" data-togglable=":dokkaHtml/main"><div class="symbol monospace"><span class="token keyword">open </span><span class="token keyword">override </span><span class="token keyword">fun </span><a href="generate-predicate-"><span class="token function">generatePredicate</span></a><span class="token punctuation">(</span><span class="parameters "><span class="parameter ">variable<span class="token operator">: </span><span data-unresolved-link="org.neo4j.cypherdsl.core/SymbolicName///PointingToDeclaration/">SymbolicName</span></span></span><span class="token punctuation">)</span><span class="token operator">: </span><span><span class="token annotation">@</span><span data-unresolved-link="org.jetbrains.annotations/NotNull///PointingToDeclaration/"><span class="token annotation">NotNull</span></span>&nbsp;</span><span data-unresolved-link="org.neo4j.cypherdsl.core/Predicates.OngoingListBasedPredicateFunction///PointingToDeclaration/">Predicates.OngoingListBasedPredicateFunction</span><span class="top-right-position"><span class="copy-icon"></span><div class="copy-popup-wrapper popup-to-left"><span class="copy-popup-icon"></span><span>Content copied to clipboard</span></div></span></div><p class="paragraph">Generates the predicate which defines how nodes of the set have to match the filter, so that the overall filter evaluates to true Examples include all, any and none</p><h4 class="">Return</h4><p class="paragraph">the builder for the predicate</p><h2 class="">Parameters</h2><div data-togglable="Parameters"><div class="table" data-togglable="Parameters"><div class="table-row" data-filterable-current=":dokkaHtml/main" data-filterable-set=":dokkaHtml/main"><div class="main-subrow keyValue WithExtraAttributes"><div class=""><span class="inline-flex"><div><span><span>variable</span></span></div></span></div><div><div class="title"><div data-togglable="Parameters"><p class="paragraph">the name of the variable based on which the predicate should be build</p></div></div></div></div></div></div></div></div></div>\n',mdxType:"DokkaComponent"}))}h.isMDXComponent=!0}}]);