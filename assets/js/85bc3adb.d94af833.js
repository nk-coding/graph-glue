"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[472],{69222:function(a,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return l},default:function(){return k},frontMatter:function(){return r},metadata:function(){return d},toc:function(){return c}});var e=n(87462),s=n(63366),o=(n(67294),n(3905)),p=n(56923),i=["components"],r={},l="<span><span>after</span></span>",d={unversionedId:"api/io.github.graphglue.data.execution/-node-query-options/after-",id:"api/io.github.graphglue.data.execution/-node-query-options/after-",title:"<span><span>after</span></span>",description:"",source:"@site/docs/api/io.github.graphglue.data.execution/-node-query-options/after-.mdx",sourceDirName:"api/io.github.graphglue.data.execution/-node-query-options",slug:"/api/io.github.graphglue.data.execution/-node-query-options/after-",permalink:"/graph-glue/api/io.github.graphglue.data.execution/-node-query-options/after-",tags:[],version:"current",frontMatter:{},sidebar:"apiSidebar",previous:{title:"<span>Node</span><wbr/><span>Query</span><wbr/><span><span>Options</span></span>",permalink:"/graph-glue/api/io.github.graphglue.data.execution/-node-query-options/-node-query-options-"},next:{title:"<span><span>before</span></span>",permalink:"/graph-glue/api/io.github.graphglue.data.execution/-node-query-options/before-"}},u={},c=[],g={toc:c};function k(a){var t=a.components,n=(0,s.Z)(a,i);return(0,o.kt)("wrapper",(0,e.Z)({},g,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"after"},(0,o.kt)("span",null,(0,o.kt)("span",null,"after"))),(0,o.kt)(p.Z,{dokkaHTML:'\n  \n  <div class="cover ">\n    \n  </div>\n  <div class="platform-hinted " data-platform-hinted="data-platform-hinted"><div class="content sourceset-depenent-content" data-active="" data-togglable=":dokkaHtml/main"><div class="symbol monospace"><span class="token keyword"></span><span class="token keyword">val </span><a href="after-">after</a><span class="token operator">: </span><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-map/index.html">Map</a><span class="token operator">&lt;</span><span class="token keyword"></span><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html">String</a><span class="token punctuation">, </span><span class="token keyword"></span><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-any/index.html">Any</a><span class="token operator">?</span><span class="token operator">&gt;</span><span class="token operator">?</span><span class="token operator"> = </span>null<span class="top-right-position"><span class="copy-icon"></span><div class="copy-popup-wrapper popup-to-left"><span class="copy-popup-icon"></span><span>Content copied to clipboard</span></div></span></div><h2 class="">Parameters</h2><div data-togglable="Parameters"><div class="table" data-togglable="Parameters"><div class="table-row" data-filterable-current=":dokkaHtml/main" data-filterable-set=":dokkaHtml/main"><div class="main-subrow keyValue WithExtraAttributes"><div class=""><span class="inline-flex"><div><span><span>after</span></span></div></span></div><div><div class="title"><div data-togglable="Parameters"><p class="paragraph">if present, only nodes after this parsed cursor are fetched</p></div></div></div></div></div></div></div></div></div>\n',mdxType:"DokkaComponent"}))}k.isMDXComponent=!0}}]);