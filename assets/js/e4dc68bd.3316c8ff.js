"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1950],{25333:function(n,a,t){t.r(a),t.d(a,{assets:function(){return d},contentTitle:function(){return l},default:function(){return g},frontMatter:function(){return o},metadata:function(){return c},toc:function(){return u}});var e=t(87462),i=t(63366),s=(t(67294),t(3905)),r=t(56923),p=["components"],o={},l="<span>parse</span><wbr/><span><span>Entry</span></span>",c={unversionedId:"api/io.github.graphglue.connection.filter.definition/-filter-entry-definition/parse-entry-",id:"api/io.github.graphglue.connection.filter.definition/-filter-entry-definition/parse-entry-",title:"<span>parse</span><wbr/><span><span>Entry</span></span>",description:"",source:"@site/docs/api/io.github.graphglue.connection.filter.definition/-filter-entry-definition/parse-entry-.mdx",sourceDirName:"api/io.github.graphglue.connection.filter.definition/-filter-entry-definition",slug:"/api/io.github.graphglue.connection.filter.definition/-filter-entry-definition/parse-entry-",permalink:"/graph-glue/api/io.github.graphglue.connection.filter.definition/-filter-entry-definition/parse-entry-",tags:[],version:"current",frontMatter:{},sidebar:"apiSidebar",previous:{title:"<span><span>name</span></span>",permalink:"/graph-glue/api/io.github.graphglue.connection.filter.definition/-filter-entry-definition/name-"},next:{title:"<span>Graph</span><wbr/><span>QLInput</span><wbr/><span>Type</span><wbr/><span><span>Generator</span></span>",permalink:"/graph-glue/api/io.github.graphglue.connection.filter.definition/-graph-q-l-input-type-generator/index-"}},d={},u=[],f={toc:u};function g(n){var a=n.components,t=(0,i.Z)(n,p);return(0,s.kt)("wrapper",(0,e.Z)({},f,t,{components:a,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"parseentry"},(0,s.kt)("span",null,"parse"),(0,s.kt)("wbr",null),(0,s.kt)("span",null,(0,s.kt)("span",null,"Entry"))),(0,s.kt)(r.Z,{dokkaHTML:'\n  \n  <div class="cover ">\n    \n  </div>\n  <div class="platform-hinted " data-platform-hinted="data-platform-hinted"><div class="content sourceset-depenent-content" data-active="" data-togglable=":dokkaHtml/main"><div class="symbol monospace"><span class="token keyword">abstract </span><span class="token keyword"></span><span class="token keyword">fun </span><a href="parse-entry-"><span class="token function">parseEntry</span></a><span class="token punctuation">(</span><span class="parameters "><span class="parameter ">value<span class="token operator">: </span><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-any/index.html">Any</a><span class="token operator">?</span></span></span><span class="token punctuation">)</span><span class="token operator">: </span><a href="../../io.github.graphglue.connection.filter.model/-filter-entry/index-">FilterEntry</a><span class="top-right-position"><span class="copy-icon"></span><div class="copy-popup-wrapper popup-to-left"><span class="copy-popup-icon"></span><span>Content copied to clipboard</span></div></span></div><p class="paragraph">Parses the entry of the provided filter</p><h4 class="">Return</h4><p class="paragraph">the parsed filter entry</p><h2 class="">Parameters</h2><div data-togglable="Parameters"><div class="table" data-togglable="Parameters"><div class="table-row" data-filterable-current=":dokkaHtml/main" data-filterable-set=":dokkaHtml/main"><div class="main-subrow keyValue WithExtraAttributes"><div class=""><span class="inline-flex"><div><span><span>value</span></span></div></span></div><div><div class="title"><div data-togglable="Parameters"><p class="paragraph">the value to parse</p></div></div></div></div></div></div></div></div></div>\n',mdxType:"DokkaComponent"}))}g.isMDXComponent=!0}}]);