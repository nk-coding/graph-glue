"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[17681],{3469:(a,e,n)=>{n.r(e),n.d(e,{assets:()=>l,contentTitle:()=>o,default:()=>c,frontMatter:()=>p,metadata:()=>i,toc:()=>d});var s=n(87462),t=(n(67294),n(3905)),r=n(56923);const p={},o="node",i={unversionedId:"api/graphglue-core/io.github.graphglue.graphql.query/-graphglue-query/node-",id:"api/graphglue-core/io.github.graphglue.graphql.query/-graphglue-query/node-",title:"node",description:"",source:"@site/docs/api/graphglue-core/io.github.graphglue.graphql.query/-graphglue-query/node-.mdx",sourceDirName:"api/graphglue-core/io.github.graphglue.graphql.query/-graphglue-query",slug:"/api/graphglue-core/io.github.graphglue.graphql.query/-graphglue-query/node-",permalink:"/graph-glue/api/graphglue-core/io.github.graphglue.graphql.query/-graphglue-query/node-",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"apiSidebar",previous:{title:"GraphglueQuery",permalink:"/graph-glue/api/graphglue-core/io.github.graphglue.graphql.query/-graphglue-query/-graphglue-query-"},next:{title:"TopLevelQueryProvider",permalink:"/graph-glue/api/graphglue-core/io.github.graphglue.graphql.query/-top-level-query-provider/index-"}},l={},d=[],g={toc:d};function c(a){let{components:e,...n}=a;return(0,t.kt)("wrapper",(0,s.Z)({},g,n,{components:e,mdxType:"MDXLayout"}),(0,t.kt)("h1",{id:"node"},"node"),(0,t.kt)(r.Z,{dokkaHTML:'\n  \n  <div class="cover ">\n    \n  </div>\n  <div class="platform-hinted " data-platform-hinted="data-platform-hinted"><div class="content sourceset-depenent-content" data-active="" data-togglable=":graphglue-core:dokkaHtmlPartial/main"><div class="symbol monospace"><span class="token keyword">suspend </span><span class="token keyword">fun </span><a href="node-"><span class="token function">node</span></a><span class="token punctuation">(</span><span class="parameters wrapped"><span class="parameter indented">&nbsp;&nbsp;&nbsp;&nbsp;id<span class="token operator">: </span><span data-unresolved-link="com.expediagroup.graphql.generator.scalars/ID///PointingToDeclaration/">ID</span><span class="token punctuation">, </span></span><span class="parameter indented">&nbsp;&nbsp;&nbsp;&nbsp;<span><span class="token annotation">@</span><span data-unresolved-link="org.springframework.beans.factory.annotation/Autowired///PointingToDeclaration/"><span class="token annotation">Autowired</span></span>&nbsp;</span>nodeQueryParser<span class="token operator">: </span><a href="../../io.github.graphglue.data.execution/-node-query-parser/index-">NodeQueryParser</a><span class="token punctuation">, </span></span><span class="parameter indented">&nbsp;&nbsp;&nbsp;&nbsp;dataFetchingEnvironment<span class="token operator">: </span><span data-unresolved-link="graphql.schema/DataFetchingEnvironment///PointingToDeclaration/">DataFetchingEnvironment</span><span class="token punctuation">, </span></span><span class="parameter indented">&nbsp;&nbsp;&nbsp;&nbsp;<span><span class="token annotation">@</span><span data-unresolved-link="org.springframework.beans.factory.annotation/Autowired///PointingToDeclaration/"><span class="token annotation">Autowired</span></span>&nbsp;</span>lazyLoadingContext<span class="token operator">: </span><a href="../../io.github.graphglue.data/-lazy-loading-context/index-">LazyLoadingContext</a></span></span><span class="token punctuation">)</span><span class="token operator">: </span><span data-unresolved-link="graphql.execution/DataFetcherResult///PointingToDeclaration/">DataFetcherResult</span><span class="token operator">&lt;</span><span class="token keyword"></span><a href="../../io.github.graphglue.model/-node/index-">Node</a><span class="token operator">?</span><span class="token operator">&gt;</span><span class="top-right-position"><span class="copy-icon"></span><div class="copy-popup-wrapper popup-to-left"><span class="copy-popup-icon"></span><span>Content copied to clipboard</span></div></span></div><p class="paragraph"><code class="lang-kotlin">node</code> query which finds a node by id</p><h4 class="">Return</h4><p class="paragraph">the result with the correct local context</p><h2 class="">Parameters</h2><div data-togglable="Parameters"><div class="table" data-togglable="Parameters"><div class="table-row" data-filterable-current=":graphglue-core:dokkaHtmlPartial/main" data-filterable-set=":graphglue-core:dokkaHtmlPartial/main"><div class="main-subrow keyValue WithExtraAttributes"><div class=""><span class="inline-flex"><div><span>node</span><wbr><span>Query</span><wbr><span><span>Parser</span></span></div></span></div><div><div class="title"><div data-togglable="Parameters"><p class="paragraph">used to parse the query</p></div></div></div></div></div><div class="table-row" data-filterable-current=":graphglue-core:dokkaHtmlPartial/main" data-filterable-set=":graphglue-core:dokkaHtmlPartial/main"><div class="main-subrow keyValue WithExtraAttributes"><div class=""><span class="inline-flex"><div><span>data</span><wbr><span>Fetching</span><wbr><span><span>Environment</span></span></div></span></div><div><div class="title"><div data-togglable="Parameters"><p class="paragraph">necessary to generate the node query, used for caching</p></div></div></div></div></div><div class="table-row" data-filterable-current=":graphglue-core:dokkaHtmlPartial/main" data-filterable-set=":graphglue-core:dokkaHtmlPartial/main"><div class="main-subrow keyValue WithExtraAttributes"><div class=""><span class="inline-flex"><div><span>lazy</span><wbr><span>Loading</span><wbr><span><span>Context</span></span></div></span></div><div><div class="title"><div data-togglable="Parameters"><p class="paragraph">used to get the <span data-unresolved-link="org.springframework.data.neo4j.core/ReactiveNeo4jClient///PointingToDeclaration/">ReactiveNeo4jClient</span> and the <span data-unresolved-link="org.springframework.data.neo4j.core.mapping/Neo4jMappingContext///PointingToDeclaration/">Neo4jMappingContext</span></p></div></div></div></div></div></div></div></div></div>\n',mdxType:"DokkaComponent"}))}c.isMDXComponent=!0}}]);