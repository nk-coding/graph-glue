"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[66521],{29965:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>p});var i=t(87462),o=(t(67294),t(3905));const r={sidebar_position:4},a="Connections",s={unversionedId:"docs/connections",id:"docs/connections",title:"Connections",description:"GraphGlue uses connections both for queries generated using the name parameter of the @DomainNode annotation and NodeSetProperty GraphGlue relationship properties.",source:"@site/docs/docs/connections.mdx",sourceDirName:"docs",slug:"/docs/connections",permalink:"/graph-glue/docs/connections",draft:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"docSidebar",previous:{title:"Authorization",permalink:"/graph-glue/docs/authorization"}},l={},p=[{value:"Schema",id:"schema",level:2},{value:"Inputs",id:"inputs",level:2},{value:"Outputs",id:"outputs",level:2}],d={toc:p};function u(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,i.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"connections"},"Connections"),(0,o.kt)("p",null,"GraphGlue uses connections both for queries generated using the ",(0,o.kt)("inlineCode",{parentName:"p"},"name")," parameter of the ",(0,o.kt)("inlineCode",{parentName:"p"},"@DomainNode")," annotation and ",(0,o.kt)("inlineCode",{parentName:"p"},"NodeSetProperty")," ",(0,o.kt)("a",{parentName:"p",href:"./modeling#graphglue-relationships"},"GraphGlue relationship properties"),"."),(0,o.kt)("p",null,"The generated connections adhere mostly to the ",(0,o.kt)("a",{parentName:"p",href:"https://relay.dev/graphql/connections.htm"},"GraphQL Cursor Connections Specification"),", except:"),(0,o.kt)("admonition",{type:"warning"},(0,o.kt)("p",{parentName:"admonition"},"In contrast to the specification, providing both ",(0,o.kt)("inlineCode",{parentName:"p"},"first")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"last")," is not supported")),(0,o.kt)("h2",{id:"schema"},"Schema"),(0,o.kt)("p",null,"The genrated connections have the following schema:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-graphql"},"type Query {\n    types(\n        after: String,\n        before: String,\n        filter: TypeFilterInput,\n        first: Int,\n        last: Int,\n        orderBy: TypeOrder\n    ): TypeConnection\n}\n\ntype TypeConnection {\n    edges: [TypeEdge!]!\n    nodes: [Type!]!\n    pageInfo: PageInfo!\n    totalCount: Int!\n}\n\ntype TypeEdge {\n    cursor: String!\n    node: Type!\n}\n\ntype PageInfo {\n    endCursor: String\n    hasNextPage: Boolean!\n    hasPreviousPage: Boolean!\n    startCursor: String\n}\n\ntype Type implements Node {\n    # ...\n}\n\ninput TypeFilterInput {\n    # ...\n}\n\ninput TypeOrder {\n    direction: OrderDirection = ASC\n    field: TypeOrderField = ID\n}\n\nenum TypeOrderField {\n    ID\n    # ...\n}\n\nenum OrderDirection {\n    ASC\n    DESC\n}\n")),(0,o.kt)("h2",{id:"inputs"},"Inputs"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"after"),": cursor, only nodes after the cursor are returned."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"before"),": cursor, only nodes before the cursor are returned."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"filter"),": filters the returned nodes, for filter generation see ",(0,o.kt)("a",{parentName:"li",href:"./modeling#filtering"},"Filtering"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"first"),": only the first ",(0,o.kt)("inlineCode",{parentName:"li"},"n")," nodes are returned, must not be present if ",(0,o.kt)("inlineCode",{parentName:"li"},"last")," is present."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"last"),": only the last ",(0,o.kt)("inlineCode",{parentName:"li"},"n")," nodes are returned, must not be present if ",(0,o.kt)("inlineCode",{parentName:"li"},"first")," is present."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"orderBy"),": allows specifiying the order of the returned nodes (including the direction). Defaults to order ascending by ID. If a field other than id is specified, the id is used to guarantee strict total order, as the field may not be unique. For order field generation, see ",(0,o.kt)("a",{parentName:"li",href:"./modeling#ordering"},"Ordering"))),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"If ",(0,o.kt)("a",{parentName:"p",href:"./authorization#graphql"},"GrarphQL permission checking")," has been set up, connections are automatically filtered to only include nodes where the specified ",(0,o.kt)("inlineCode",{parentName:"p"},"Permission")," is granted.\nThis is done before ",(0,o.kt)("inlineCode",{parentName:"p"},"first")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"last")," is applied, meaning it is not possible to extract information this way.")),(0,o.kt)("h2",{id:"outputs"},"Outputs"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"edges"),": all nodes, with their specific cursor"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"nodes"),": all nodes"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"totalCount"),": total count of nodes after filtering, but before pagination"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"pageInfo"),": allows checking if there are nodes after/before, and get the cursor for the first/last node returned")),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"Cursors are ordering dependent and are meant to be used for pagination, they are not meant to be stored long-time.")),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("inlineCode",{parentName:"p"},"totalCount")," is only fetched if specified, as it is rather expensive to fetch.")))}u.isMDXComponent=!0}}]);