"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[21094],{76125:(a,e,t)=>{t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>o,default:()=>g,frontMatter:()=>s,metadata:()=>p,toc:()=>c});var n=t(87462),i=(t(67294),t(3905)),r=t(56923);const s={},o="parseEntry",p={unversionedId:"api/graphglue-core/io.github.graphglue.connection.filter.definition.scalars/-scalar-filter-definition/parse-entry-",id:"api/graphglue-core/io.github.graphglue.connection.filter.definition.scalars/-scalar-filter-definition/parse-entry-",title:"parseEntry",description:"",source:"@site/docs/api/graphglue-core/io.github.graphglue.connection.filter.definition.scalars/-scalar-filter-definition/parse-entry-.mdx",sourceDirName:"api/graphglue-core/io.github.graphglue.connection.filter.definition.scalars/-scalar-filter-definition",slug:"/api/graphglue-core/io.github.graphglue.connection.filter.definition.scalars/-scalar-filter-definition/parse-entry-",permalink:"/graph-glue/api/graphglue-core/io.github.graphglue.connection.filter.definition.scalars/-scalar-filter-definition/parse-entry-",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"apiSidebar",previous:{title:"ScalarFilterDefinition",permalink:"/graph-glue/api/graphglue-core/io.github.graphglue.connection.filter.definition.scalars/-scalar-filter-definition/-scalar-filter-definition-"},next:{title:"ScalarFilterEntry",permalink:"/graph-glue/api/graphglue-core/io.github.graphglue.connection.filter.definition.scalars/-scalar-filter-entry/index-"}},l={},c=[],d={toc:c};function g(a){let{components:e,...t}=a;return(0,i.kt)("wrapper",(0,n.Z)({},d,t,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"parseentry"},"parseEntry"),(0,i.kt)(r.Z,{dokkaHTML:'\n  \n  <div class="cover ">\n    \n  </div>\n  <div class="platform-hinted " data-platform-hinted="data-platform-hinted"><div class="content sourceset-depenent-content" data-active="" data-togglable=":graphglue-core:dokkaHtmlPartial/main"><div class="symbol monospace"><span class="token keyword">open </span><span class="token keyword">override </span><span class="token keyword">fun </span><a href="parse-entry-"><span class="token function">parseEntry</span></a><span class="token punctuation">(</span><span class="parameters "><span class="parameter ">value<span class="token operator">: </span><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-any/index.html">Any</a><span class="token operator">?</span><span class="token punctuation">, </span></span><span class="parameter ">permission<span class="token operator">: </span><a href="../../io.github.graphglue.authorization/-permission/index-">Permission</a><span class="token operator">?</span></span></span><span class="token punctuation">)</span><span class="token operator">: </span><a href="../../io.github.graphglue.connection.filter.model/-filter-entry/index-">FilterEntry</a><span class="top-right-position"><span class="copy-icon"></span><div class="copy-popup-wrapper popup-to-left"><span class="copy-popup-icon"></span><span>Content copied to clipboard</span></div></span></div><p class="paragraph">Parses the entry of the provided filter</p><h4 class="">Return</h4><p class="paragraph">the parsed filter entry</p><h2 class="">Parameters</h2><div data-togglable="Parameters"><div class="table" data-togglable="Parameters"><div class="table-row" data-filterable-current=":graphglue-core:dokkaHtmlPartial/main" data-filterable-set=":graphglue-core:dokkaHtmlPartial/main"><div class="main-subrow keyValue WithExtraAttributes"><div class=""><span class="inline-flex"><div><span><span>value</span></span></div></span></div><div><div class="title"><div data-togglable="Parameters"><p class="paragraph">the value to parse</p></div></div></div></div></div></div></div></div></div>\n',mdxType:"DokkaComponent"}))}g.isMDXComponent=!0}}]);