"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[205],{3905:function(e,n,t){t.d(n,{Zo:function(){return d},kt:function(){return u}});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=a.createContext({}),p=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},d=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},c=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),c=p(t),u=i,h=c["".concat(s,".").concat(u)]||c[u]||m[u]||r;return t?a.createElement(h,o(o({ref:n},d),{},{components:t})):a.createElement(h,o({ref:n},d))}));function u(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,o=new Array(r);o[0]=c;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var p=2;p<r;p++)o[p]=t[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}c.displayName="MDXCreateElement"},4127:function(e,n,t){t.r(n),t.d(n,{assets:function(){return d},contentTitle:function(){return s},default:function(){return u},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return m}});var a=t(7462),i=t(3366),r=(t(7294),t(3905)),o=["components"],l={sidebar_position:3},s="Authorization",p={unversionedId:"authorization",id:"authorization",title:"Authorization",description:"GraphGlue only provides Authorization features. Authentication must be implemented by the user, for example using OpenID Connect",source:"@site/docs/authorization.mdx",sourceDirName:".",slug:"/authorization",permalink:"/graph-glue/authorization",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Modeling",permalink:"/graph-glue/modeling"},next:{title:"Connections",permalink:"/graph-glue/connections"}},d={},m=[{value:"Declaration",id:"declaration",level:2},{value:"Overview",id:"overview",level:3},{value:"Rule",id:"rule",level:3},{value:"Inheritance",id:"inheritance",level:3},{value:"Checking",id:"checking",level:2},{value:"Permission",id:"permission",level:3},{value:"GraphQL",id:"graphql",level:3},{value:"Manually",id:"manually",level:3}],c={toc:m};function u(e){var n=e.components,t=(0,i.Z)(e,o);return(0,r.kt)("wrapper",(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"authorization"},"Authorization"),(0,r.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"GraphGlue only provides Authorization features. Authentication must be implemented by the user, for example using OpenID Connect"))),(0,r.kt)("h2",{id:"declaration"},"Declaration"),(0,r.kt)("p",null,"To declare Permissions, GraphGlue uses a declarative approach, meaning authorizations are declared using the ",(0,r.kt)("inlineCode",{parentName:"p"},"@Authorization")," annotation on ",(0,r.kt)("inlineCode",{parentName:"p"},"Node")," subtypes.\nCurrently, only node-level permissions are supported, while field-level permissions are not.\nHowever, if you need field-level permissions, ",(0,r.kt)("a",{parentName:"p",href:"#manually"},"checking manually")," is possible."),(0,r.kt)("h3",{id:"overview"},"Overview"),(0,r.kt)("p",null,"Declaraing a permission looks like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'@DomainNode\n@Authorization(\n    name = "READ",\n    allow = [Rule("leafAllowedBean")],\n    allowFromRelated = ["tree"],\n    disallow = [Rule("leafDisallowedBean")]\n)\nclass Leaf : Node() {\n    @NodeRelationship("LEAF", Direction.OUTGOING)\n    @delegate:Transient\n    val tree by NodeProperty<Tree>()\n}\n')),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"name")," is used to identify the permission to check, it is later referenced in ",(0,r.kt)("a",{parentName:"p",href:"#checking"},"Checking"),"."),(0,r.kt)("p",null,"The checking algorithm works in two steps:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Check if access is allowed. Access is allowed if any ",(0,r.kt)("inlineCode",{parentName:"p"},"Rule")," in ",(0,r.kt)("inlineCode",{parentName:"p"},"allow")," evaluates to ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),", OR if the permission with ",(0,r.kt)("inlineCode",{parentName:"p"},"name")," is granted to any node referenced in ",(0,r.kt)("inlineCode",{parentName:"p"},"allowFromRelated"),".\nIf neither of these conditions is fulfilled, the permission is NOT granted.\nEspecially, if ",(0,r.kt)("inlineCode",{parentName:"p"},"allow")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"allowFromRelated")," are both empty, allow is not granted."),(0,r.kt)("div",{parentName:"li",className:"admonition admonition-caution alert alert--warning"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"}," If any ",(0,r.kt)("inlineCode",{parentName:"p"},"NodeSetProperty")," is referenced in ",(0,r.kt)("inlineCode",{parentName:"p"},"allowFromRelated"),", allow is granted if the permission is granted to ANY of the related nodes.")))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Check if access is disallowed. Access is granted if an only if NO ",(0,r.kt)("inlineCode",{parentName:"p"},"Rule")," in ",(0,r.kt)("inlineCode",{parentName:"p"},"disallow")," evaluates to ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),"."))),(0,r.kt)("p",null,"In this example, allow is granted if the ",(0,r.kt)("inlineCode",{parentName:"p"},'"leftAllowedBean"')," Rule evaluate to ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),", OR if ",(0,r.kt)("inlineCode",{parentName:"p"},'"READ"')," is granted to ",(0,r.kt)("inlineCode",{parentName:"p"},"tree"),".\nThen, the permission is granted if also ",(0,r.kt)("inlineCode",{parentName:"p"},'"leafDisallowedBean"')," evaluates to ",(0,r.kt)("inlineCode",{parentName:"p"},"false")),(0,r.kt)("h3",{id:"rule"},"Rule"),(0,r.kt)("p",null,"A ",(0,r.kt)("inlineCode",{parentName:"p"},"Rule")," consists of two parts: a ",(0,r.kt)("inlineCode",{parentName:"p"},"String")," that references a Spring bean of type ",(0,r.kt)("inlineCode",{parentName:"p"},"AuthorizationRuleGenerator"),", and a list of Strings used as configuration parameters."),(0,r.kt)("p",null,"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'@Bean("startsWithRule")\nfun startsWithRuleGenerator(): AuthorizationRuleGenerator {\n    return AuthorizationRuleGenerator { node, rule, permission ->\n        val requiredPrefix = (permission.context as MyAuthorizationContext).prefix\n        node.property(rule.options[0]).startsWith(Cypher.anonParameter(requiredPrefix))\n    }\n}\n')),(0,r.kt)("p",null,"This rule checks if a String property on ",(0,r.kt)("inlineCode",{parentName:"p"},"node")," with a name provided as first configuration parameter has a prefix provided in the permission to check.\nIt can be used like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'@DomainNode\n@Authorization("READ", allow = [Rule("startsWithRule", "name")])\nclass NamedNode(val name: String) : Node()\n')),(0,r.kt)("p",null,"Note that the ",(0,r.kt)("inlineCode",{parentName:"p"},"AuthorizationRuleGenerator")," generates a ",(0,r.kt)("a",{parentName:"p",href:"https://neo4j-contrib.github.io/cypher-dsl/current/"},"CypherDSL")," ",(0,r.kt)("inlineCode",{parentName:"p"},"Conditon"),", which allows checking complex conditions directly in the database."),(0,r.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"GraphGlue proovides an ",(0,r.kt)("inlineCode",{parentName:"p"},"io.github.graphglue.model.ALL_RULE"),", which can be used to allow any access.\nThis can be usefull for testing or debugging."))),(0,r.kt)("h3",{id:"inheritance"},"Inheritance"),(0,r.kt)("p",null,"The algorithm first searches for all ",(0,r.kt)("inlineCode",{parentName:"p"},"@Authorization")," annotations with the specified ",(0,r.kt)("inlineCode",{parentName:"p"},"name"),".\nThis includes annotations from superclasses.\nIt is even possible to use multiple ",(0,r.kt)("inlineCode",{parentName:"p"},"@Authorization")," annotations with the same ",(0,r.kt)("inlineCode",{parentName:"p"},"name")," on the same class, although this is not recommended."),(0,r.kt)("h2",{id:"checking"},"Checking"),(0,r.kt)("h3",{id:"permission"},"Permission"),(0,r.kt)("p",null,"Generally, it is checked if a ",(0,r.kt)("inlineCode",{parentName:"p"},"Permission")," is granted to a ",(0,r.kt)("inlineCode",{parentName:"p"},"Node")),(0,r.kt)("p",null,"A ",(0,r.kt)("inlineCode",{parentName:"p"},"Permission")," consists of two parts"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The name of the permission ot be checked"),(0,r.kt)("li",{parentName:"ul"},"A ",(0,r.kt)("inlineCode",{parentName:"li"},"AuthorizationContext")," instance. It is intended implement this interface in order to provide custom values to ",(0,r.kt)("inlineCode",{parentName:"li"},"AuthorizationRuleGenerator")," instances, e.g. the id of the authenticated user, or a role String.")),(0,r.kt)("h3",{id:"graphql"},"GraphQL"),(0,r.kt)("p",null,"To automatically check permissions, provide a ",(0,r.kt)("inlineCode",{parentName:"p"},"Permission")," to the ",(0,r.kt)("a",{parentName:"p",href:"https://opensource.expediagroup.com/graphql-kotlin/docs/server/spring-server/spring-graphql-context"},"GraphQL Context Map")," under the key ",(0,r.kt)("inlineCode",{parentName:"p"},"Permission::class"),"."),(0,r.kt)("p",null,"Permissions are checked at"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"the ",(0,r.kt)("inlineCode",{parentName:"li"},"node")," query"),(0,r.kt)("li",{parentName:"ul"},"queries generated using the ",(0,r.kt)("inlineCode",{parentName:"li"},"name")," parameter of the ",(0,r.kt)("inlineCode",{parentName:"li"},"@DomainNode")," annotation"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"./modeling#graphglue-relationships"},"GraphGlue relationship properties"))),(0,r.kt)("div",{className:"admonition admonition-warning alert alert--danger"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))),"warning")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"Any other properties returning ",(0,r.kt)("inlineCode",{parentName:"p"},"Node")," types are NOT automatically checked!\nThis is due to checking is only done directly in the database.\nThis is espacially the case when returning nodes from functions which use the lazy-loading functionality of GraphGlue relationships, or when returning nodes in mutations."),(0,r.kt)("p",{parentName:"div"},"Consider the following example with the ",(0,r.kt)("inlineCode",{parentName:"p"},"Leaf")," class from ",(0,r.kt)("a",{parentName:"p",href:"#overview"},"above")),(0,r.kt)("pre",{parentName:"div"},(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"data class CreateLeafOutput(val leaf: Leaf)\n")),(0,r.kt)("p",{parentName:"div"},"When returing this, ",(0,r.kt)("inlineCode",{parentName:"p"},"leaf")," is NOT checked, however, note that the permission is checked for GraphGlue relationships on ",(0,r.kt)("inlineCode",{parentName:"p"},"leaf"),", in this example the ",(0,r.kt)("inlineCode",{parentName:"p"},"tree")," property."))),(0,r.kt)("h3",{id:"manually"},"Manually"),(0,r.kt)("p",null,"Permissions can be manually checked by injecting a ",(0,r.kt)("inlineCode",{parentName:"p"},"AuthorizationChecker")," bean.\nIt provides a ",(0,r.kt)("inlineCode",{parentName:"p"},"hasAuthorization")," function, which takes a ",(0,r.kt)("inlineCode",{parentName:"p"},"Node")," and a ",(0,r.kt)("inlineCode",{parentName:"p"},"Permission")," as input, and returns whether the permission is granted on the node."),(0,r.kt)("p",null,"While it is up to the user to provide the required ",(0,r.kt)("inlineCode",{parentName:"p"},"Permission"),", the recommended way is to put it into the GraphQL Context Map as described in ",(0,r.kt)("a",{parentName:"p",href:"#graphql"},"GraphQL"),", and then obtain it using an ",(0,r.kt)("a",{parentName:"p",href:"https://opensource.expediagroup.com/graphql-kotlin/docs/schema-generator/execution/data-fetching-environment/"},"injected DataFetchingEnvironment"),".",(0,r.kt)("br",{parentName:"p"}),"\n","Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'@Component\nclass LeafMutations: Mutation {\n    fun createLeaf(input: CreateLeafInput, dfe: DataFetchingEnvironment): CreateLeafOutput {\n        val readPermission = dfe.requiredPermission // gives access to the permission under the key Permission::class\n        val myPermission = Perrmission("WRITE", dfe.authorizationContext) // AuthorizationContext from the Permission\n        // ...\n    }\n}\n')),(0,r.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"If automatic permission checking in GraphQL is not wanted, it is also possible to only provide the ",(0,r.kt)("inlineCode",{parentName:"p"},"AuthorizationContext")," under the key ",(0,r.kt)("inlineCode",{parentName:"p"},"AuthorizationContext::class")," to the GraphQL Context Map"))))}u.isMDXComponent=!0}}]);