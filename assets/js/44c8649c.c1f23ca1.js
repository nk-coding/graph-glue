"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7801],{58452:function(n,a,o){o.r(a),o.d(a,{assets:function(){return c},contentTitle:function(){return l},default:function(){return k},frontMatter:function(){return p},metadata:function(){return d},toc:function(){return u}});var e=o(87462),t=o(63366),s=(o(67294),o(3905)),r=o(58909),i=["components"],p={},l="nodeIdGenerator",d={unversionedId:"api/io.github.graphglue.model/-graphglue-model-configuration/node-id-generator-",id:"api/io.github.graphglue.model/-graphglue-model-configuration/node-id-generator-",title:"nodeIdGenerator",description:"",source:"@site/docs/api/io.github.graphglue.model/-graphglue-model-configuration/node-id-generator-.mdx",sourceDirName:"api/io.github.graphglue.model/-graphglue-model-configuration",slug:"/api/io.github.graphglue.model/-graphglue-model-configuration/node-id-generator-",permalink:"/graph-glue/api/io.github.graphglue.model/-graphglue-model-configuration/node-id-generator-",tags:[],version:"current",frontMatter:{},sidebar:"apiSidebar",previous:{title:"allRuleGenerator",permalink:"/graph-glue/api/io.github.graphglue.model/-graphglue-model-configuration/all-rule-generator-"},next:{title:"Node",permalink:"/graph-glue/api/io.github.graphglue.model/-node/index-"}},c={},u=[],g={toc:u};function k(n){var a=n.components,o=(0,t.Z)(n,i);return(0,s.kt)("wrapper",(0,e.Z)({},g,o,{components:a,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"nodeidgenerator"},"nodeIdGenerator"),(0,s.kt)(r.Z,{dokkaHTML:'\n  \n  <div class="cover ">\n    \n  </div>\n  <div class="platform-hinted " data-platform-hinted="data-platform-hinted"><div class="content sourceset-depenent-content" data-active="" data-togglable=":dokkaHtml/main"><div class="symbol monospace"><div class="block"><div class="block"><span class="token annotation">@</span><span data-unresolved-link="org.springframework.context.annotation/Bean///PointingToDeclaration/"><span class="token annotation">Bean</span></span><span class="token punctuation">(</span><span>value<span class="token operator"> = </span><span class="token punctuation">[</span><span><span class="breakable-word"><span class="token string">"nodeIdGenerator"</span></span></span><wbr><span class="token punctuation">]</span></span><wbr><span class="token punctuation">)</span></div><div class="block"><span class="token annotation">@</span><span data-unresolved-link="org.springframework.boot.autoconfigure.condition/ConditionalOnMissingBean///PointingToDeclaration/"><span class="token annotation">ConditionalOnMissingBean</span></span></div></div><span class="token keyword"></span><span class="token keyword">fun </span><a href="node-id-generator-"><span class="token function">nodeIdGenerator</span></a><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">: </span><span data-unresolved-link="org.springframework.data.neo4j.core.support/UUIDStringGenerator///PointingToDeclaration/">UUIDStringGenerator</span><span class="top-right-position"><span class="copy-icon"></span><div class="copy-popup-wrapper popup-to-left"><span class="copy-popup-icon"></span><span>Content copied to clipboard</span></div></span></div><p class="paragraph">Default node id generator</p><h4 class="">Return</h4><p class="paragraph">the generator for node ids</p></div></div>\n',mdxType:"DokkaComponent"}))}k.isMDXComponent=!0}}]);